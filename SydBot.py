import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

# Simulando uma base de dados de alunos. A chave principal √© o ID de matr√≠cula do aluno.
banco_de_dados_alunos = {
    "202203708007": {"nome": "Jefferson Dami√£o da Silva Lima", "presente": True, "chat_id": None},
    "202203442295": {"nome": "vitor melo", "presente": False, "chat_id": None}, # Exemplo com chat_id
    "202203424467": {"nome": "vitor mota", "presente": False, "chat_id": None},
    "202108462012": {"nome": "anne victoria", "presente": False, "chat_id": None}
}

#-----------------------------------------------------------------
CHAVE_API = "------------------------------"
bot = telebot.TeleBot(CHAVE_API)
#-----------------------------------------------------------------

def gerar_teclado_justificativas():
    """
    Cria e retorna um teclado inline com as op√ß√µes de justificativa de falta.
    """
    # 1. Cria o objeto do teclado
    markup = InlineKeyboardMarkup()

    # 2. Define a quantidade de colunas (opcional, mas √∫til para organizar)
    markup.row_width = 2

    # 3. Cria os bot√µes
    # O 'text' √© o que o usu√°rio v√™.
    # O 'callback_data' √© a informa√ß√£o que o bot recebe quando o bot√£o √© clicado.
    # Use um padr√£o para o callback_data, como 'just_NOMEDOBOTAO'
    btn_medico = InlineKeyboardButton("ü©∫ Atestado M√©dico", callback_data="just_medico")
    btn_pessoal = InlineKeyboardButton("üë§ Problema Pessoal", callback_data="just_pessoal")
    btn_transporte = InlineKeyboardButton("üöå Transporte", callback_data="just_transporte")
    btn_outro = InlineKeyboardButton("‚úèÔ∏è Outro", callback_data="just_outro")

    # 4. Adiciona os bot√µes ao teclado
    markup.add(btn_medico, btn_pessoal, btn_transporte, btn_outro)

    return markup


# Handler para o comando /start
@bot.message_handler(commands=["start", "iniciar"])
def saudacao_inicial(mensagem):
    # 'mensagem' cont√©m todas as informa√ß√µes da mensagem recebida,
    # incluindo o chat.id de quem enviou.
    chat_id = mensagem.chat.id

    texto = """
    Ol√°! Sou o SYD, mas pode me chamar de chat mesmo.

    Para que eu possa te enviar notifica√ß√µes, por favor, me informe sua matr√≠cula usando o comando:
    /registrar [SUA_MATRICULA_AQUI]

    Por exemplo: /registrar 207904708227
    """
    bot.send_message(chat_id, texto)

# Fun√ß√£o que varre o banco de dados e envia mensagens para os ausentes.
# Esta fun√ß√£o N√ÉO √© um handler, ela ser√° chamada por n√≥s.
def verificar_faltas_e_notificar():
    print("\nIniciando verifica√ß√£o de faltas...")

    # Percorre cada aluno no nosso banco de dados
    for matricula, dados in banco_de_dados_alunos.items():
        aluno_presente = dados["presente"]
        chat_id_aluno = dados["chat_id"]
        nome_aluno = dados["nome"]

        # Se o aluno n√£o est√° presente E n√≥s temos o chat_id dele...
        if not aluno_presente and chat_id_aluno:
            try:
                texto_notificacao = f"Ol√°, {nome_aluno}. Notamos que voc√™ n√£o registrou presen√ßa na aula de hoje. Poderia nos informar o motivo?"

                # Envia a mensagem para o aluno
                bot.send_message(chat_id_aluno, texto_notificacao)

                print(f"Notifica√ß√£o de falta enviada para {nome_aluno} (Matr√≠cula: {matricula})")

            except Exception as e:
                # O 'Exception as e' captura qualquer erro que possa ocorrer.
                # Por exemplo, se o aluno bloqueou o bot, o send_message vai falhar.
                print(f"Falha ao enviar mensagem para {nome_aluno}. Erro: {e}")


# Handler para o comando /registrar
@bot.message_handler(commands=["registrar"])
def registrar_aluno(mensagem):
    chat_id = mensagem.chat.id
    try:
        # Pega o texto da mensagem, divide em palavras e pega a segunda (a matr√≠cula)
        matricula = mensagem.text.split()[1]

        # Verifica se a matr√≠cula existe no nosso "banco de dados"
        if matricula in banco_de_dados_alunos:
            # Atualiza o chat_id do aluno no banco de dados
            banco_de_dados_alunos[matricula]["chat_id"] = chat_id
            nome_aluno = banco_de_dados_alunos[matricula]["nome"]

            bot.send_message(chat_id,
                             f"√ìtimo, {nome_aluno}! Seu cadastro foi vinculado. Voc√™ receber√° notifica√ß√µes por aqui.")
            print(f"Aluno {nome_aluno} (matr√≠cula {matricula}) registrou o chat_id: {chat_id}")
        else:
            bot.send_message(chat_id, "Matr√≠cula n√£o encontrada. Verifique o n√∫mero e tente novamente.")

    except IndexError:
        bot.send_message(chat_id, "Formato inv√°lido. Use: /registrar [SUA_MATRICULA]")



@bot.message_handler(commands=["verificarfaltas"])
def comando_verificar_faltas(mensagem):
    """
    Handler para o comando /verificarfaltas.
    Apenas o admin pode execut√°-lo para iniciar a rotina de notifica√ß√£o.
    """
    if mensagem.chat.id == 1530419893:
        bot.reply_to(mensagem, "Comando recebido, chefe! Iniciando a verifica√ß√£o de faltas agora mesmo. Avisarei quando terminar.")
        # Chama a fun√ß√£o principal que faz a m√°gica acontecer
        verificar_faltas_e_notificar()
    else:
        bot.reply_to(mensagem, "Desculpe, este √© um comando restrito. Voc√™ n√£o tem permiss√£o para execut√°-lo.")



print("Bot em execu√ß√£o...")
bot.polling() #Fun√ß√£o watchdog se h√° mensagem nova
